library(BB)

ecu = function(x) {
n = length(x)
F = rep(NA, n)
F[1] = x[1] - x[2]
F[2] = x[1]^2 + x[2]^2 -1
F
}
Pt = c(1,1) # puntos iniciales
sol = BBsolve(par=Pt, fn=ecu)
sol$par

plot(sol$par)
plot(ecu)



trigexp = function(x) {
  
#se obtiene el numero de variables del sistema
n = length(x)

#se crea un F con n elementos vacíos
F = rep(NA, n)

#Se ingresan las ecuaciones del sistema
#Primera ecuación: F[1] = 3(x_1)^2 + 2(x_2) - 5 + sin( (x_1)-(x_2) )( sin( (x_1)+(x_2) ) )
F[1] = 3*x[1]^2 + 2*x[2] - 5 + sin(x[1] - x[2]) * sin(x[1] + x[2])
#tn1 es una secuencia de 2 hasta n-1
tn1 = 2:(n-1)
#Se evaluan tn1 ecuaciones
F[tn1] = -x[tn1-1] * exp(x[tn1-1] - x[tn1]) + x[tn1] *
( 4 + 3*x[tn1]^2) + 2 * x[tn1 + 1] + sin(x[tn1] -
x[tn1 + 1]) * sin(x[tn1] + x[tn1 + 1]) - 8
#Se evalua la ultima ecuacion n
F[n] = -x[n-1] * exp(x[n-1] - x[n]) + 4*x[n] - 3
F
}
n = 10000
p0 = runif(n) # n initial random starting guesses
#se resuelve el sistema trigexp con BBsolve, utilizando n valores iniciales
sol = BBsolve(par=p0, fn=trigexp)
#Muestra por pantalla la solución del sistema para cada uno de los n valores iniciales
sol$par
